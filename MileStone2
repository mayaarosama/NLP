#toknization 




import csv
import nltk 
from nltk.tokenize import word_tokenize


nltk.download('punkt')

# for tokenize each row text

def tokenize_textN(text_row):

   tokens = word_tokenize(text_row)
   return tokens

# assuming that all data from the csv file are all of type string or putted in a string before tokenization 
def tokenize_csv_file(csv_file_path,text_column):
   tokenize_text_array = []
   with open(csv_file_path, 'r', encoding='utf-8') as file:
      csv_reader = csv.DictReader(file)
      for row in csv_reader:
         text_row = row[text_column]
         tokens = tokenize_textN(text_row)
         tokenize_text_array.append(tokens)
   return tokenize_text_array



# Bag of Words


import csv
from sklearn.feature_extraction.text import CountVectorizer

import csv
from sklearn.feature_extraction.text import TfidfVectorizer



def preprocess_text(text):
   

   text = text.lower()
   return text


def create_bow_representation(csv_file_path, text_column_name):
   

   texts = []
   with open(csv_file_path, 'r', encoding='utf-8') as file:
      csv_reader = csv.DictReader(file)
      for row in csv_reader:
         text = row[text_column_name]
         preprocessed_text = preprocess_text(text)
         texts.append(preprocessed_text)

 # Initialize CountVectorizer to convert text data to BoW representation
   vectorizer = CountVectorizer()
   bow_representation = vectorizer.fit_transform(texts)
    
   return bow_representation, vectorizer.get_feature_names()
   




def create_tfidf_representation(csv_file_path, text_column_name):
   
    texts = []
    with open(csv_file_path, 'r', encoding='utf-8') as file:
        csv_reader = csv.DictReader(file)
        for row in csv_reader:
            text = row[text_column_name]
            preprocessed_text = preprocess_text(text)
            texts.append(preprocessed_text)
    
    # Initialize TfidfVectorizer to convert text data to TF-IDF representation
    vectorizer = TfidfVectorizer()
    tfidf_representation = vectorizer.fit_transform(texts)
    
    return tfidf_representation, vectorizer.get_feature_names()


   

